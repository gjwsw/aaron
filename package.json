{
  "name": "aaron",
  "description": "fully integrated web-based church management system",
  "version": "0.0.1",
  "license": "MIT",
  "author": "Dominik Schreiber <dominik@dominikschreiber.com> (http://dominikschreiber.com)",
  "contributors": [
    "Jonas Weber <weber.jonas@gmail.com>",
    "Dominik Schreiber <dominik@dominikschreiber.com> (http://dominikschreiber.com)"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/gjwsw/aaron.git"
  },
  "bugs": "https://github.com/gjwsw/aaron/issues",
  "scripts": {
    "postinstall": "parallelshell 'npm run postinstall:tsd' 'npm run postinstall:bower' 'npm run compile'",
    "postinstall:tsd": "tsd install",
    "postinstall:bower": "bower install",

    "info": "npm run info:env",
    "info:env": "env",

    "clean": "npm run clean:target && npm run clean:test",
    "clean:target": "rimraf $npm_package_config_build_target",
    "clean:test": "rimraf $npm_package_config_test_sqlitedb",
    "clean:assets": "rimraf $npm_package_config_build_target'/**/*.+(html|png|svg)'",

    "validate": "npm run validate:js",
    "validate:js": "jshint $npm_package_config_build_src",

    "precompile": "npm run clean && npm run validate",
    "compile": "npm run compile:src && npm run compile:scss && npm run compile:assets",
    "compile:src": "babel $npm_package_config_build_src --out-dir $npm_package_config_build_target",
    "compile:scss": "node-sass --output $npm_package_config_build_target/client --output-style compressed $npm_package_config_build_src/client/aaron.scss",
    "compile:assets": "rsync -av --ignore-existing $npm_package_config_build_src/* $npm_package_config_build_target",

    "pretest": "npm run compile",
    "test": "npm run test:target",
    "test:target": "multi='mocha-lcov-reporter=- spec=-' mocha \"$npm_package_config_build_target/**/*.spec.js\" --reporter mocha-multi",
    "test:coverage": "babel-node isparta cover --report lcov mocha --reporter spec --compilers babel:babel/register -- $npm_package_config_build_src/**/*.spec.js",

    "watch": "parallelshell 'npm run watch:compile' 'npm run watch:test'",
    "watch:compile": "parallelshell 'npm run watch:compile:src' 'npm run watch:compile:scss' 'npm run watch:compile:assets'",
    "watch:compile:src": "npm run compile:src -- --watch",
    "watch:compile:scss": "npm run compile:scss -- --watch",
    "watch:compile:assets": "watch 'npm run clean:assets && npm run compile:assets' $npm_package_config_build_src",
    "watch:test": "npm run watch:test:target",
    "watch:test:target": "npm run test:target -- --watch",

    "prestart": "npm run compile",
    "start": "lib/bin/server",

    "preserve": "npm run compile",
    "serve": "parallelshell 'npm run serve:livereload' 'npm run watch' 'npm run serve:start' 'npm run serve:open'",
    "serve:livereload": "live-reload --port 9091 $npm_package_config_build_src",
    "serve:start": "nodemon $npm_package_config_build_target/bin/server --watch $npm_package_config_build_src",
    "serve:open": "node -e \"require('open')('http://localhost:$npm_package_config_server_port')\""
  },
  "bin": {
    "aaron": "lib/bin/server"
  },
  "dependencies": {
    "express": "^4.13.3",
    "body-parser": "^1.14.1",
    "orm": "^2.1.27",
    "sqlite3": "^3.1.0",
    "underscore": "^1.8.3",
    "babel": "^5.8.23",
    "node-sass": "^3.3.3",
    "jshint": "^2.8.0",
    "tsd": "^0.6.4",
    "bower": "^1.5.3"
  },
  "devDependencies": {
    "mocha": "^2.2.5",
    "mocha-lcov-reporter": "^1.0.0",
    "mocha-multi": "^0.7.2",
    "isparta": "^3.1.0",
    "codeclimate-test-reporter": "^0.1.1",
    "nodemon": "^1.7.1",
    "rimraf": "^2.4.3",
    "supertest": "^1.1.0",
    "watch": "^0.16.0",
    "live-reload": "^1.1.0",
    "open": "^0.0.5",
    "parallelshell": "^2.0.0"
  },
  "config": {
    "server:port": "8888",

    "build:target": "./lib",
    "build:src": "./src",
    "build:assets": "./src/client",

    "test:sqlitedb": "./.database-tmp.sqlite",

    "db:name": "aaron",
    "db:user": "root",
    "db:pass": "password",
    "db:host": "localhost",
    "db:dialect": "sqlite",
    "db:storage": "./.database.sqlite"
  }
}
